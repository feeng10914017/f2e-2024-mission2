import{V as a,l as o,s as r}from"./chunk-HOWSOM4S.js";var u=class i{activeRequests=new Map;requestsSubject=new o(new Map);emitUpdate(){this.requestsSubject.next(new Map(this.activeRequests))}clearRequests(){Array.from(this.activeRequests.values()).every(e=>e.isComplete)&&setTimeout(()=>{this.activeRequests.clear(),this.emitUpdate()},500)}startRequest(t){this.activeRequests.set(t,{id:t,progress:0,isComplete:!1,error:!1,cancel:!1}),this.emitUpdate()}updateProgress(t,e){let s=this.activeRequests.get(t);s&&(s.progress=e,this.emitUpdate())}completeRequest(t){let e=this.activeRequests.get(t);e&&(e.isComplete=!0,e.progress=100,this.emitUpdate(),this.clearRequests())}errorRequest(t){let e=this.activeRequests.get(t);e&&(e.isComplete=!0,e.progress=100,e.error=!0,this.emitUpdate(),this.clearRequests())}cancelRequest(t){let e=this.activeRequests.get(t);e&&(e.isComplete=!0,e.progress=100,e.cancel=!0,this.emitUpdate(),this.clearRequests())}get isLoading$(){return this.requestsSubject.pipe(r(t=>t.size>0))}get totalProgress$(){return this.requestsSubject.pipe(r(t=>{if(t.size===0)return 0;let e=Array.from(t.values()).reduce((s,n)=>s+n.progress,0);return Math.round(e/t.size)}))}getRequestProgress(t){return this.requestsSubject.pipe(r(e=>e.get(t)?.progress??0))}static \u0275fac=function(e){return new(e||i)};static \u0275prov=a({token:i,factory:i.\u0275fac,providedIn:"root"})};export{u as a};
